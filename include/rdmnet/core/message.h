/******************************************************************************
 * Copyright 2019 ETC Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************
 * This file is a part of RDMnet. For more information, go to:
 * https://github.com/ETCLabs/RDMnet
 *****************************************************************************/

/*!
 * \file rdmnet/core/message.h
 * \brief Basic types for parsed RDMnet messages.
 */

#ifndef RDMNET_CORE_MESSAGE_H_
#define RDMNET_CORE_MESSAGE_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include "etcpal/acn_rlp.h"
#include "etcpal/uuid.h"
#include "rdmnet/core/broker_prot.h"
#include "rdmnet/core/rpt_prot.h"
#include "rdmnet/core/ept_prot.h"

/*!
 * \defgroup rdmnet_message Message
 * \ingroup rdmnet_core_lib
 *
 * Types to represent RDMnet messages, and functions to pack and unpack them. LLRP Messages are
 * excluded, as they are handled by separate logic.
 *
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif

/*! An RDM command generated by a local component, to be sent over RDMnet. */
typedef struct RdmnetLocalRdmCommand
{
  /*! The UID of the RDMnet component to which this command is addressed. */
  RdmUid rdmnet_dest_uid;
  /*!
   * The endpoint on the RDMnet component to which this command is addressed. If addressing the
   * default (root) responder of an RDMnet device, set this to E133_NULL_ENDPOINT.
   */
  uint16_t dest_endpoint;
  /*!
   * The UID of the RDM responder to which this command is addressed. If addressing the default
   * (root) responder of an RDMnet device, this should be the same as rdmnet_dest_uid.
   */
  RdmUid rdm_dest_uid;
  /*! The sub-device to which this command is addressed, or 0 for the root device. */
  uint16_t subdevice;
  /*! The command class for this command. */
  rdm_command_class_t command_class;
  /*!
   * The RDM parameter ID for this command. One of the values from E1.20 Table A-3, E1.33
   * Table A-15, or any of the relevant E1.37 extension standards.
   */
  uint16_t param_id;
  /*! (optional) The parameter data, if this command has parameter data. */
  const uint8_t* data;
  /*! The length of the parameter data (set to 0 if data is NULL). */
  uint8_t data_len;
} RdmnetLocalRdmCommand;

/*! An RDMnet RDM command received by this component. */
typedef struct RdmnetRemoteRdmCommand
{
  /*! The UID of the component that sent this command. */
  RdmUid rdmnet_source_uid;
  /*! The local endpoint to which this command is addressed. */
  uint16_t dest_endpoint;
  /*! The command's sequence number, to be echoed in its response. */
  uint32_t seq_num;
  /*! The header information from the encapsulated RDM command. */
  RdmCommandHeader rdm_header;
  /*! Pointer to buffer containing any associated RDM parameter data. */
  const uint8_t* data;
  /*! The length of any associated RDM parameter data. */
  uint8_t data_len;
} RdmnetRemoteRdmCommand;

/*! An unsolicited RDM response generated by a local component, to be sent over RDMnet. */
typedef struct RdmnetUnsolicitedRdmResponse
{
  /*! The endpoint from which this response is being sent. */
  uint16_t source_endpoint;
  /*! The UID of the RDM responder from which this response is being sent. */
  RdmUid rdm_source_uid;
  /*! The sub-device from which this response is being sent, or 0 for the root device. */
  uint16_t subdevice;
  /*!
   * The RDM parameter ID for this response. One of the values from E1.20 Table A-3, E1.33
   * Table A-15, or any of the relevant E1.37 extension standards.
   */
  uint16_t param_id;
  /*! (optional) Any parameter data associated with this response. */
  const uint8_t* data;
  /*! The length of the parameter data (set to 0 if data is NULL). */
  size_t data_len;
} RdmnetUnsolicitedRdmResponse;

/*! An RDMnet RDM response received by a local component. */
typedef struct RdmnetRemoteRdmResponse
{
  /*! The UID of the RDMnet component that sent this response. */
  RdmUid rdmnet_source_uid;
  /*! The endpoint from which the response was sent. */
  uint16_t source_endpoint;
  /*! The sequence number of the response, for matching with a corresponding command. */
  uint32_t seq_num;

  /*! The original command associated with this response; valid if seq_num != 0. */
  RdmCommandHeader original_command_header;
  /*! Any parameter data associated with the original RDM command; valid if seq_num != 0. */
  const uint8_t* original_command_data;
  /*!
   * The length of the parameter data associated with the original RDM command; valid if
   * seq_num != 0.
   */
  uint8_t original_command_data_len;

  /*! The header information from the encapsulated RDM response. */
  RdmResponseHeader rdm_header;
  /*! Any parameter data associated with the RDM response. */
  const uint8_t* rdm_data;
  /*! The length of the parameter data associated with the RDM response. */
  size_t rdm_data_len;

  /*!
   * This message contains partial RDM data. This can be set when the library runs out of static
   * memory in which to store RDM response data and must deliver a partial data buffer before
   * continuing (this only applies to the data buffer within the RDM response). The application
   * should store the partial data but should not act on it until another RdmnetRemoteRdmResponse
   * is received with more_coming set to false.
   */
  bool more_coming;
} RdmnetRemoteRdmResponse;

/*! An RDMnet RPT status message received by a local component. */
typedef struct RdmnetRemoteRptStatus
{
  /*! The UID of the RDMnet component that sent this status message. */
  RdmUid rdmnet_source_uid;
  /*! The endpoint from which the status message was sent. */
  uint16_t source_endpoint;
  /*! The sequence number of the status message, for matching with a corresponding command. */
  uint32_t seq_num;
  /*! A status code that indicates the specific error or status condition. */
  rpt_status_code_t status_code;
  /*! An optional implementation-defined status string to accompany this status message. */
  const char* status_string;
} RdmnetRemoteRptStatus;

typedef enum
{
  kRptClientMsgRdmCmd,
  kRptClientMsgRdmResp,
  kRptClientMsgStatus
} rpt_client_msg_t;

typedef struct RptClientMessage
{
  rpt_client_msg_t type;
  union
  {
    RdmnetRemoteRdmCommand cmd;
    RdmnetRemoteRdmResponse resp;
    RdmnetRemoteRptStatus status;
  } payload;
} RptClientMessage;

#define RDMNET_GET_REMOTE_RDM_COMMAND(rptclimsgptr) (&(rptclimsgptr)->payload.cmd)
#define RDMNET_GET_REMOTE_RDM_RESPONSE(rptclimsgptr) (&(rptclimsgptr)->payload.resp)
#define RDMNET_GET_REMOTE_RPT_STATUS(rptclimsgptr) (&(rptclimsgptr)->payload.status)

/*! An RDM command to be sent from a local LLRP Manager. */
typedef struct LlrpLocalRdmCommand
{
  /*! The CID of the LLRP Target to which this command is addressed. */
  EtcPalUuid dest_cid;
  /*! The UID of the LLRP Target to which this command is addressed. */
  RdmUid dest_uid;
  /*! The sub-device to which this command is addressed, or 0 for the root device. */
  uint16_t subdevice;
  /*! The command class for this command. */
  rdm_command_class_t command_class;
  /*!
   * The RDM parameter ID for this command. One of the values from E1.20 Table A-3, E1.33
   * Table A-15, or any of the relevant E1.37 extension standards.
   */
  uint16_t param_id;
  /*! (optional) The parameter data, if this command has parameter data. */
  const uint8_t* data;
  /*! The length of the parameter data (set to 0 if data is NULL). */
  uint8_t data_len;
} LlrpLocalRdmCommand;

/*! An RDM command received from a remote LLRP Manager. */
typedef struct LlrpRemoteRdmCommand
{
  /*! The CID of the LLRP Manager from which this command was received. */
  EtcPalUuid src_cid;
  /*! The sequence number received with this command, to be echoed in the corresponding response. */
  uint32_t seq_num;
  /*!
   * An ID for the network interface on which this command was received. This helps the LLRP
   * library send the response on the same interface on which it was received.
   */
  RdmnetMcastNetintId netint_id;
  /*! The header information from the encapsulated RDM command. */
  RdmCommandHeader rdm_header;
  /*! Pointer to buffer containing any associated RDM parameter data. */
  const uint8_t* data;
  /*! The length of any associated RDM parameter data. */
  uint8_t data_len;
} LlrpRemoteRdmCommand;

/*! An RDM response received from a remote LLRP Target. */
typedef struct LlrpRemoteRdmResponse
{
  /*! The CID of the LLRP Target from which this command was received. */
  EtcPalUuid src_cid;
  /*! The sequence number of this response (to be associated with a previously-sent command). */
  uint32_t seq_num;
  /*! The header information from the encapsulated RDM response. */
  RdmResponseHeader rdm_header;
  /*! Any parameter data associated with the RDM response. */
  const uint8_t* rdm_data;
  /*! The length of the parameter data associated with the RDM response. */
  uint8_t rdm_data_len;
} LlrpRemoteRdmResponse;

/*! Information about an RDMnet response to be sent synchronously from an RDMnet callback. */
typedef struct RdmnetSyncRdmResponse
{
  /*!
   * The length of the response data which has been copied into the buffer given at initialization
   * time. Set to 0 for no data. Valid if returning kRdmnetResponseActionSendAck.
   */
  size_t response_data_len;
  /*! The NACK reason code. Valid if returning kRdmnetResponseActionSendNack. */
  rdm_nack_reason_t nack_reason;
  /*! The RPT status code. Valid if returning kRdmnetResponseActionSendStatus. */
  rpt_status_code_t status_code;
  /*!
   * Whether a status string is present in the buffer given at client initialization. Length will
   * be inferred from the string's null terminator. Valid if returning
   * kRdmnetResponseActionSendStatus.
   */
  bool status_string_present;
} RdmnetSyncRdmResponse;

/*! Information about an LLRP response to be sent synchronously from an RDMnet callback. */
typedef struct LlrpSyncRdmResponse
{
  /*!
   * The length of the response data which has been copied into the buffer given at initialization
   * time. Set to 0 for no data. Valid if returning kLlrpResponseActionSendAck.
   */
  size_t response_data_len;
  /*! The NACK reason code. Valid if returning kLlrpResponseActionSendNack. */
  rdm_nack_reason_t nack_reason;
} LlrpSyncRdmResponse;

typedef enum
{
  kEptClientMsgData,
  kEptClientMsgStatus
} ept_client_msg_t;

typedef struct EptClientMessage
{
  ept_client_msg_t type;
  union
  {
    EptStatusMsg status;
    EptDataMsg data;
  } payload;
} EptClientMessage;

/*! An RDMnet received from one of RDMnet's TCP protocols. */
typedef struct RdmnetMessage
{
  /*! The root layer vector. Compare to the vectors in \ref etcpal_acn_rlp. */
  uint32_t vector;
  /*! The CID of the Component that sent this message. */
  EtcPalUuid sender_cid;
  /*! The encapsulated message; use the helper macros to access it. */
  union
  {
    BrokerMessage broker;
    RptMessage rpt;
    EptMessage ept;
  } data;
} RdmnetMessage;

/*!
 * \brief Determine whether an RdmnetMessage contains a Broker message.
 * \param msgptr Pointer to RdmnetMessage.
 * \return (bool) whether the message contains a Broker message.
 */
#define RDMNET_IS_BROKER_MSG(msgptr) ((msgptr)->vector == ACN_VECTOR_ROOT_BROKER)

/*!
 * \brief Get the encapsulated Broker message from an RdmnetMessage.
 * \param msgptr Pointer to RdmnetMessage.
 * \return Pointer to encapsulated Broker message (BrokerMessage*).
 */
#define RDMNET_GET_BROKER_MSG(msgptr) (&(msgptr)->data.broker)

/*!
 * \brief Determine whether an RdmnetMessage contains a RPT message.
 * \param msgptr Pointer to RdmnetMessage.
 * \return (bool) whether the message contains a RPT message.
 */
#define RDMNET_IS_RPT_MSG(msgptr) ((msgptr)->vector == ACN_VECTOR_ROOT_RPT)

/*!
 * \brief Get the encapsulated RPT message from an RdmnetMessage.
 * \param msgptr Pointer to RdmnetMessage.
 * \return Pointer to encapsulated RPT message (RptMessage*).
 */
#define RDMNET_GET_RPT_MSG(msgptr) (&(msgptr)->data.rpt)

/*!
 * \brief Determine whether an RdmnetMessage contains a EPT message.
 * \param msgptr Pointer to RdmnetMessage.
 * \return (bool) whether the message contains a EPT message.
 */
#define RDMNET_IS_EPT_MSG(msgptr) ((msgptr)->vector == ACN_VECTOR_ROOT_EPT)

/*!
 * \brief Get the encapsulated EPT message from an RdmnetMessage.
 * \param msgptr Pointer to RdmnetMessage.
 * \return Pointer to encapsulated EPT message (EptMessage*).
 */
#define RDMNET_GET_EPT_MSG(msgptr) (&(msgptr)->data.ept)

void rdmnet_free_message_resources(RdmnetMessage* msg);

#ifdef __cplusplus
}
#endif

/*!
 * @}
 */

#endif /* RDMNET_CORE_MESSAGE_H_ */
